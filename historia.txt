git init (inicia el proyecto en la carpeta)
git status (estado del proyecto)
git add (añade los cambios del proyecto pero no en el master)
git rm (nombre del archibo a borrar)
git rm --cached (nombre del archibo a borrar chache(?)
git commit -m "guarda los cambios en el master"

git show (puedo dejarlo asi o añadirle un nombre de archivo exacto
esto para saver que se modifico)

con git log (nombre para ver los commits realizados sobre el objeto)
git diff (aca entramos el codigo del commit para diferenciar entre versiones)
uno y uno no siempre son 2 y 3 + 3 no siemre es 1
git log --stat (para ver un par de detalles no siempre utiles pero no ignorables)
git reset (id del commit) -- hard /soft (uno borra todo pero todo)
git checkout + ID del commit nos permite viajar en el tiempo
git commit -am "Hace auomaticamente ael añadido de los cambios mas no añade archivos"
prueba vim
git branch (nombre x) creara otra rama  a la cual cambiaremos a con
git checkout (nombre de la rama)
git merge (nombre de rama secundaria que se añadira al master)
Siempre se debe hacer en el master
git remote add (link de github) añade esto a la pagina de github
git push origin (master) enviamos nuestro repositorio local a gitHub
git pull origin master (para traer cosas del remoto)
git pull origin master --allow-unrelate-histories (por si no me perimte traer los archivos de gitHub por 
los commit indiferente)
Crear un nuevo tag y asignarlo a un commit: git tag -a nombre-del-tag id-del-commit.
Borrar un tag en el repositorio local: git tag -d nombre-del-tag.
Listar los tags de nuestro repositorio local: git tag o git show-refs --tags.
Publicar un tag en el repositorio remoto: git push origin --tags.
Borrar un tag del repositorio remoto: git tag -d nombre-del-tag y git push origin :refs/tags/nombre-del-tag.
git clone (url de lo que sea que vallamos a clonar) para extraer un proyecto de gitHub
git remote add (upstream) agregar para hacer pull del proyecto de otra persona
